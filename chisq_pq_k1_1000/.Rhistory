pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=paste(SeasonStart,mth,"-"))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=paste(SeasonStart,mth,sep="-"))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=as_date(paste(SeasonStart,mth,sep="-")))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=as_date(paste(SeasonStart,mth,sep="-")),format="%Y-%b")
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=as_date(paste(SeasonStart,mth,sep="-"),format="%Y-%b"))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=case_when(
mth=="Jul" ~paste0(SeasonStart,"-07-01")
mth=="Aug" ~paste0(SeasonStart,"-08-01")
mth=="Sep" ~paste0(SeasonStart,"-09-01")
mth=="Oct" ~paste0(SeasonStart,"-10-01")
mth=="Nov" ~paste0(SeasonStart,"-11-01")
mth=="Dec" ~paste0(SeasonStart,"-12-01")
mth=="Jan" ~paste0(SeasonStart+1,"-01-01")
mth=="Feb" ~paste0(SeasonStart+1,"-02-01")
mth=="Mar" ~paste0(SeasonStart+1,"-03-01")
mth=="Apr" ~paste0(SeasonStart+1,"-04-01")
mth=="May" ~paste0(SeasonStart+1,"-05-01")
mth=="Jun" ~paste0(SeasonStart+1,"-06-01")
)
) %>%
mutate(dt=as_date(dt))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=case_when(
mth=="Jul" ~paste0(SeasonStart,"-07-01"),
mth=="Aug" ~paste0(SeasonStart,"-08-01"),
mth=="Sep" ~paste0(SeasonStart,"-09-01"),
mth=="Oct" ~paste0(SeasonStart,"-10-01"),
mth=="Nov" ~paste0(SeasonStart,"-11-01"),
mth=="Dec" ~paste0(SeasonStart,"-12-01"),
mth=="Jan" ~paste0(SeasonStart+1,"-01-01"),
mth=="Feb" ~paste0(SeasonStart+1,"-02-01"),
mth=="Mar" ~paste0(SeasonStart+1,"-03-01"),
mth=="Apr" ~paste0(SeasonStart+1,"-04-01"),
mth=="May" ~paste0(SeasonStart+1,"-05-01"),
mth=="Jun" ~paste0(SeasonStart+1,"-06-01")
)
) %>%
mutate(dt=as_date(dt))
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=case_when(
mth=="Jul" ~paste0(SeasonStart,"-07-01"),
mth=="Aug" ~paste0(SeasonStart,"-08-01"),
mth=="Sep" ~paste0(SeasonStart,"-09-01"),
mth=="Oct" ~paste0(SeasonStart,"-10-01"),
mth=="Nov" ~paste0(SeasonStart,"-11-01"),
mth=="Dec" ~paste0(SeasonStart,"-12-01"),
mth=="Jan" ~paste0(SeasonStart+1,"-01-01"),
mth=="Feb" ~paste0(SeasonStart+1,"-02-01"),
mth=="Mar" ~paste0(SeasonStart+1,"-03-01"),
mth=="Apr" ~paste0(SeasonStart+1,"-04-01"),
mth=="May" ~paste0(SeasonStart+1,"-05-01"),
mth=="Jun" ~paste0(SeasonStart+1,"-06-01")
)
) %>%
mutate(dt=as_date(dt)) %>%
select(-SeasonStart,-mth)
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=case_when(
mth=="Jul" ~paste0(SeasonStart,"-07-01"),
mth=="Aug" ~paste0(SeasonStart,"-08-01"),
mth=="Sep" ~paste0(SeasonStart,"-09-01"),
mth=="Oct" ~paste0(SeasonStart,"-10-01"),
mth=="Nov" ~paste0(SeasonStart,"-11-01"),
mth=="Dec" ~paste0(SeasonStart,"-12-01"),
mth=="Jan" ~paste0(SeasonStart+1,"-01-01"),
mth=="Feb" ~paste0(SeasonStart+1,"-02-01"),
mth=="Mar" ~paste0(SeasonStart+1,"-03-01"),
mth=="Apr" ~paste0(SeasonStart+1,"-04-01"),
mth=="May" ~paste0(SeasonStart+1,"-05-01"),
mth=="Jun" ~paste0(SeasonStart+1,"-06-01")
)
) %>%
mutate(dt=as_date(dt)) %>%
select(-SeasonStart,-mth) -> snow
plot(snow$dt,snow$snow,type='l')
x <- ts(snow$snow,start=c(1893,7),frequency=12)
ggtsdisplay(x)
library(forecast)
ggtsdisplay(x)
ggtsdisplay(log(x+1)
ggtsdisplay(log(x+1)
)
ggtsdisplay(log(x+1))
x
x<-na.interp(x)
ggtsdisplay(x)
ggtsdisplay(log(x+1))
x
log(x+1)
tail(log(x+1),120)
tail(x,120)
View(SnowGR)
SnowGR %>%
select(-SeasonEnd,-Total) %>%
pivot_longer(!SeasonStart,names_to="mth",values_to="snow") %>%
mutate(dt=case_when(
mth=="Jul" ~paste0(SeasonStart,"-07-01"),
mth=="Aug" ~paste0(SeasonStart,"-08-01"),
mth=="Sep" ~paste0(SeasonStart,"-09-01"),
mth=="Oct" ~paste0(SeasonStart,"-10-01"),
mth=="Nov" ~paste0(SeasonStart,"-11-01"),
mth=="Dec" ~paste0(SeasonStart,"-12-01"),
mth=="Jan" ~paste0(SeasonStart+1,"-01-01"),
mth=="Feb" ~paste0(SeasonStart+1,"-02-01"),
mth=="Mar" ~paste0(SeasonStart+1,"-03-01"),
mth=="Apr" ~paste0(SeasonStart+1,"-04-01"),
mth=="May" ~paste0(SeasonStart+1,"-05-01"),
mth=="Jun" ~paste0(SeasonStart+1,"-06-01")
)
) %>%
mutate(dt=as_date(dt)) %>%
filter(year(dt)<=2011) %>%
select(-SeasonStart,-mth) -> snow
plot(snow$dt,snow$snow,type='l')
x <- ts(snow$snow,start=c(1893,7),frequency=12)
x<-na.interp(x)
ggtsdisplay(x)
ggtsdisplay(log(x+1))
tail(x,120)
tail(log(x+1),120)
ggtsdisplay(log(x+2))
ggtsdisplay(log(x+1))
library(garma)
gg_raw_pgram(x,k=2)
garma(x,order=c(4,0,0))
garma(x,order=c(11,0,0))
garma(x,order=c(11,0,0),k=2)
garma(x,order=c(7,0,0),k=2)
garma(x,order=c(3,0,0),k=2)
garma(x,order=c(2,0,0),k=2)
garma(log(x+1),order=c(2,0,0),k=2)
garma(log(x+1),order=c(2,0,0),k=3)
garma(log(x+1),order=c(2,0,0),k=1)
garma(log(x+1),order=c(4,0,0),k=1)
garma(log(x+1),order=c(8,0,0),k=1)
garma(log(x+1),order=c(3,0,0),k=1)
autoplot(fit,h=24)
fit<-garma(log(x+1),order=c(3,0,0),k=1)
autoplot(fit,h=24)
library(tidyverse)
library(lubridate)
library(forecast)
fit <- Arima(runif(500),order=c(1,0,1),fixed=c(-0.8,-0.4,0))
y<-simulate(fit,nsim=500)
Arima(y,order=c(1,0,1))
whittle.obj<-function(theta,ss) {
phi <- theta[1]
theta <- theta[2]
cos_2_pi_f <- cos(2.0*pi*ss$freq)
spec <- ss$spec
mod_phi <- (1+phi^2-2*phi*cos_2_pi_f)
mod_theta <- (1+phi^2+2*theta*cos_2_pi_f)
spec_den_inv <- 2.0*pi * mod_phi / mod_theta  # Inverse of spectral density
spec_den_inv[is.infinite(spec_den_inv)] <- NA
spec_den_inv[spec_den_inv<=0] <-NA
I_f <- spec*spec_den_inv
res <- sum(I_f-log(spec_den_inv),na.rm=TRUE)
return(res)
}
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
spikes <- big_spikes(ss)
fit<-sim_optim(c(0.25,spikes[['f1']],0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
return(fit$par)
}
whittle.est(y)
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
fit<-sim_optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
return(fit$par)
}
whittle.est(y)
library(pracma)
library(Rsolnp)
library(nloptr)
# generic optimize function
sim_optim<-function(par, objective, lower, upper, ...) {
# check pars
for (i in 1:length(par)) if (par[i]<=lower[i]|par[i]>=upper[i]) {
par[i]<- (lower[i]+upper[i])/2   # if below lower bound then set to middle value
}
res <- solnp(par, objective, LB=lower, UB=upper, control=list(tol=1e-12,trace=0,outer.iter=3), ...)
if (res$convergence!=0)
res<-cobyla(par, objective, lower=lower, upper=upper, control=list(maxeval=500), ...)
else res$par <- res$pars
return(res)
}
whittle.est(y)
# generic optimize function
sim_optim<-function(par, objective, lower, upper, ...) {
# check pars
for (i in 1:length(par)) if (par[i]<=lower[i]|par[i]>=upper[i]) {
par[i]<- (lower[i]+upper[i])/2   # if below lower bound then set to middle value
}
#res <- solnp(par, objective, LB=lower, UB=upper, control=list(tol=1e-12,trace=0,outer.iter=3), ...)
#if (res$convergence!=0)
res<-cobyla(par, objective, lower=lower, upper=upper, control=list(maxeval=500), ...)
#else res$par <- res$pars
return(res)
}
whittle.est(y)
# generic optimize function
sim_optim<-function(par, objective, lower, upper, ...) {
# check pars
for (i in 1:length(par)) if (par[i]<=lower[i]|par[i]>=upper[i]) {
par[i]<- (lower[i]+upper[i])/2   # if below lower bound then set to middle value
}
res <- solnp(par, objective, LB=lower, UB=upper, control=list(tol=1e-12,trace=0,outer.iter=3), ...)
if (res$convergence!=0)
res<-cobyla(par, objective, lower=lower, upper=upper, control=list(maxeval=500), ...)
else res$par <- res$pars
return(res)
}
whittle.obj<-function(theta,ss) {
phi <- theta[1]
theta <- theta[2]
cos_2_pi_f <- cos(2.0*pi*ss$freq)
spec <- ss$spec
mod_phi <- (1+phi^2-2*phi*cos_2_pi_f)
mod_theta <- (1+phi^2+2*theta*cos_2_pi_f)
spec_den_inv <- 2.0*pi * mod_phi / mod_theta  # Inverse of spectral density
spec_den_inv[is.infinite(spec_den_inv)] <- NA
spec_den_inv[spec_den_inv<=0] <-NA
I_f <- spec*spec_den_inv
res <- sum(I_f-log(spec_den_inv),na.rm=TRUE)
return(res)
}
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
fit<-sim_optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
return(fit$par)
}
whittle.est(y)
Arima(y,order=c(1,0,1))
whittle.est(y)
fit
y
y<-simulate(fit,nsim=500,future=FALSE)
Arima(y,order=c(1,0,1))
whittle.est(y)
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
fit<-sim_optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
print(fit)
return(fit$par)
}
whittle.est(y)
optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
ss<-spectrum(y,plot=FALSE,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
optim(c(0.0,0.0),
whittle.obj,
ss=ss)
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE)#,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
fit<-sim_optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
print(fit)
return(fit$par)
}
fit <- Arima(runif(500),order=c(1,0,1),fixed=c(-0.8,-0.4,0))
y<-simulate(fit,nsim=500,future=FALSE)
Arima(y,order=c(1,0,1))
whittle.est(y)
optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
plot(ss$freq,ss$spec,type='line')
y<-simulate(fit,nsim=500,future=FALSE)
Arima(y,order=c(1,0,1))
whittle.est(y)
whittle.obj<-function(theta,ss) {
phi <- theta[1]
theta <- theta[2]
cos_2_pi_f <- cos(2.0*pi*ss$freq)
spec <- ss$spec
mod_phi <- (1+phi^2-2*phi*cos_2_pi_f)
mod_theta <- (1+theta^2+2*theta*cos_2_pi_f)
spec_den_inv <- 2.0*pi * mod_phi / mod_theta  # Inverse of spectral density
spec_den_inv[is.infinite(spec_den_inv)] <- NA
spec_den_inv[spec_den_inv<=0] <-NA
I_f <- spec*spec_den_inv
res <- sum(I_f-log(spec_den_inv),na.rm=TRUE)
return(res)
}
# Find Whittle Estimates for parameters GAR(1)
whittle.est<-function(y) {
ss<-spectrum(y,plot=FALSE)#,detrend=FALSE,demean=FALSE,method='pgram',taper=0,fast=FALSE)
fit<-sim_optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
print(fit)
return(fit$par)
}
fit <- Arima(runif(500),order=c(1,0,1),fixed=c(-0.8,-0.4,0))
y<-simulate(fit,nsim=500,future=FALSE)
Arima(y,order=c(1,0,1))
whittle.est(y)
optim(c(0.0,0.0),
whittle.obj,
lower=c(-0.999,-0.999),
upper=c(0.999,0.999),
ss=ss)
plot(ss$freq,ss$spec,type='line')
library(tidyverse)
library(lubridate)
library(rstan)
library(rstantools)
library(bayesplot)
setwd("/home/richard/UniWork/Ggbr Research/Simulations Paper/sims/Set2/gauss_pq_k1_1000")
options(mc.cores=parallel::detectCores())
synProcess <- readRDS('syn_k1gauss100.rds')
bayes_ml<-function(y,runs=2000,...) {
stan_params <- list(N=length(y),y=y)
fit <- stan(
file = "exact_f.stan", # Stan program
data = stan_params,        # named list of data
chains = 4,                # number of Markov chains
warmup = 1000,             # number of warmup iterations per chain
iter = runs,               # total number of iterations per chain
cores = 4,                 # number of cores (could use one per chain)
seed=1795523,
refresh = 0,                # no progress shown
...
)
return(fit)
}
synProcess <- readRDS('syn_k1gauss1000.rds')
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:267,]
summary(res)
hist(res$bml_phi,breaks=20)
hist(res$bml_theta,breaks=20)
res$bml_divergent
View(res)
sum(which(res$bml_lp_rhat>1.1))
res$bml_lp_rhat>1.1
sum(res$bml_lp_rhat>1.1)
View(res)
View(res)
y<-synProcess$y4
system.time(fit1 <- bayes_ml(y,control=list(adapt_delta=0.1)))
fit1
system.time(fit3 <- bayes_ml(y,control=list(adapt_delta=0.3)))
fit3
system.time(fit5 <- bayes_ml(y,control=list(adapt_delta=0.5)))
fit5
system.time(fit7 <- bayes_ml(y,control=list(adapt_delta=0.7)))
fit7
system.time(fit9 <- bayes_ml(y,control=list(adapt_delta=0.9)))
fit9
system.time(fit <- bayes_ml(y,control=list(adapt_delta=0.95)))
fit
y8<-synProcess$y8
system.time(fit58 <- bayes_ml(y8,control=list(adapt_delta=0.5)))
fit58
system.time(fit68 <- bayes_ml(y8,control=list(adapt_delta=0.6)))
fit68
system.time(fit78 <- bayes_ml(y8,control=list(adapt_delta=0.7)))
fit78
# compile and test
y<-synProcess$y4
system.time(fit5 <- bayes_ml(y,control=list(adapt_delta=0.5)))
fit5
system.time(fit6 <- bayes_ml(y,control=list(adapt_delta=0.6)))
fit6
system.time(fit7 <- bayes_ml(y,control=list(adapt_delta=0.7)))
fit7
system.time(fit9 <- bayes_ml(y,control=list(adapt_delta=0.9)))
fit9
system.time(fit <- bayes_ml(y,control=list(adapt_delta=0.95)))
fit
y8<-synProcess$y8
system.time(fit58 <- bayes_ml(y8,control=list(adapt_delta=0.5)))
fit58
system.time(fit68 <- bayes_ml(y8,control=list(adapt_delta=0.6)))
fit68
system.time(fit78 <- bayes_ml(y8,control=list(adapt_delta=0.7)))
fit78
library(tidyverse)
library(lubridate)
library(rstan)
library(rstantools)
library(bayesplot)
setwd("/home/richard/UniWork/Ggbr Research/Simulations Paper/sims/Set2/gauss_pq_k1_1000")
options(mc.cores=parallel::detectCores())
synProcess <- readRDS('syn_k1gauss1000.rds')
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:7,]
summary(res)
View(res)
View(res)
3000/60
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:7,]
View(res)
res <- res[1:10,]
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:10,]
View(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:20,]
View(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:20,]
View(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:20,]
View(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:50,]
View(res)
res <- res[1:27,]
summary(res)
res$bml_divergent
rw <- readRDS("res_gauss_1000_k1_ARMA_whittle.RDS")
rwll <- readRDS("res_gauss_1000_k1_ARMA_wll.RDS")
summary(rw)
summary(rwll)
rbw <- readRDS("res_gauss_1000_k1_ARMA_bw.RDS")
summary(rbw)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:35,]
summary(res)
rm(fit5,fit58,fit6,fit68,fit7,fit78,fit9,y,y8,fit,fit1,fit3)
gc()
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:100,]
summary(res)
View(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:115,]
summary(res)
res <- res[res$bml_lp_rhat<1.1,]
summary(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:196,]
res <- res[res$bml_lp_rhat<1.1,]
summary(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:196,]
dim(res <- res[res$bml_lp_rhat>=1.1,])
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:216,]
dim(res <- res[res$bml_lp_rhat>=1.1,])
res <- res[res$bml_lp_rhat<1.1,]
summary(res)
res <- readRDS("res_gauss_1000_k1_ARMA_bml.RDS")
res <- res[1:216,]
res <- res[res$bml_lp_rhat<1.1,]
summary(res)
hist(res$bml_phi,breaks=20)
hist(res$bml_theta,breaks=20)
res$bml_divergent
